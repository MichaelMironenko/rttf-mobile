doctype html
html(lang="en")
  head
    meta(charset="UTF-8")
    meta(name="viewport" content="width=device-width, initial-scale=1.0")
    title Table Tennis Scoreboard
    script(src="https://cdn.tailwindcss.com")
    link(href="../../styles.css" rel="stylesheet")
    link(href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet")
    

    
    
  body(class="min-h-screen flex justify-center bg-[#114c70] px-8 items-center relative")
    //- div(class="absolute top-0 bottom-0 w-[10px] bg-white bg-opacity-80") 
    div(class="flex justify-center items-center w-full h-full")
    

      mixin playerCard(playerName, playerNumber)
        td
          div(class="flex justify-center items-center space-x-2 p-4")
            div(id="player" + playerNumber + "Name" class="text-[2.5vw] uppercase text-slate-100")= playerName
            div(id="serve" + playerNumber class="serve-indicator size-5 rounded-full animate-bounce hidden" style="background: radial-gradient(circle at 30% 30%, #ffffff, #d4d4d4, #9e9e9e);")
          div(class="bg-gradient-to-b mx-auto from-gray-200 to-gray-400 aspect-[3/4] w-[35vw] relative rounded-3xl p-4 max-h-[75vh]")
            div(id="undoPlayer" + playerNumber class="hidden absolute right-4 top-4 bg-rttf-color-10 rounded-full text-center z-10 text-[4vw] leading-none text-rttf-black-50 size-[4vw]" onclick=`undoLastPoint(${playerNumber})`)
              | ⤺
            button(id="player" + playerNumber + "Score" class="font-bold flex justify-center font-sans items-center h-full w-full text-[23vw]" 
              style="background-color: #071E39; color: transparent; -webkit-background-clip: text; background-clip: text; text-shadow: 0px 2px 2px rgb(255 255 255 / 23%)"
              onclick=`addPoint(${playerNumber})`)
              | 0


      table(class="table-auto w-full")
        thead
          tr
            //- Миксин для первого игрока с индикатором подачи, который скрыт по умолчанию
            
            +playerCard('Н. Полянский', 1)
            //- Средний блок
            td(class="text-center items-center flex flex-col px-4 min-w-[20%]")
              div(class="text-[2.5vw] p-4 text-slate-100") 1/8
              div.flex.gap-4
                div(class="bg-gradient-to-b from-gray-200 to-gray-400 text-blue-900 aspect-[3/4] rounded-lg p-3 max-h-[15vh]")
                  div#player1Sets(
                    style="background-color: #071E39; font-weight: bold; color: transparent; -webkit-background-clip: text; background-clip: text; text-shadow: 0px 2px 2px rgb(255 255 255 / 23%)"
                    class="w-full text-[4vw] flex justify-center items-center leading-none"
                  ) 0
                div(class="bg-gradient-to-b from-gray-200 to-gray-400 text-blue-900 aspect-[3/4] rounded-lg p-3 max-h-[15vh]")
                  div#player2Sets(
                    style="background-color: #071E39; font-weight: bold; color: transparent; -webkit-background-clip: text; background-clip: text; text-shadow: 0px 2px 2px rgb(255 255 255 / 23%)"
                    class="w-full text-[4vw] flex justify-center items-center leading-none"
                  ) 0
              button#continueBtn(class="bg-rttf-green text-white rounded-lg animate-pulse py-2 px-4 mt-4 hidden" onclick="startNewSet()") Следующий сет
              div#timer(class="text-[4vw] mt-8  text-slate-300") 0:00
              button#pauseBtn(class="bg-rttf-blue text-white rounded-lg py-2 hidden px-4 mt-2" onclick="togglePause()") Пауза
              button#resumeBtn(class="bg-rttf-green text-white rounded-lg py-2 px-4 mt-2 hidden" onclick="togglePause()") Продолжить
              button#fullscreenBtn(class="bg-gray-500 text-white rounded-lg py-2 px-4 mt-4" onclick="toggleFullscreen()") Полноэкранный режим
              button#newGameBtn(class="bg-green-500 text-white py-2 px-4 mt-4 hidden rounded-lg" onclick="resetGame()") Начать новую игру
            //- Миксин для второго игрока, индикатор подачи отображается по умолчанию
            +playerCard('И. Абельмасов', '2')

      div#gameOverOverlay(class="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center hidden")
        div(class="bg-white p-8 rounded-lg text-center")
          h2.text-xl.font-bold#gameOverMessage Игра закончена!
          button#closeModalBtn(class="bg-blue-500 text-white py-2 px-4 mt-4 rounded-lg" onclick="closeGameOverOverlay()") Закрыть
           
      
  script.
    let isPlayer1Winner = false;
    let isPlayer2Winner = false;
    let player1Score = 0;
    let player2Score = 0;
    let player1Sets = 0;
    let player2Sets = 0;
    let totalPoints = 0;
    let currentServer = 1;
    let timerInterval;
    let time = 0;
    let isPaused = false;
    let gameOver = false;
    let lastAction = null; // Запоминаем последнее действие

    // Таймер
    function startTimer() {
      timerInterval = setInterval(() => {
        if (!isPaused) {
          time++;
          document.getElementById('timer').textContent = formatTime(time);
        }
      }, 1000);
      document.getElementById('pauseBtn').classList.remove('hidden');  // Показываем кнопку паузы
    }

    function formatTime(seconds) {
      const minutes = Math.floor(seconds / 60);
      const secs = seconds % 60;
      return `${minutes}:${secs.toString().padStart(2, '0')}`;
    }


    // Обновление счёта
    function updateScore(player) {
    if (player === 1) {
        document.getElementById('player1Score').textContent = player1Score;
    } else {
        document.getElementById('player2Score').textContent = player2Score;
    }

    checkWinner();
    }

    // Добавление очков
    // Добавление очков
    function addPoint(player) {
      if (gameOver) return;  // Блокировка после завершения игры
      if (!timerInterval) {
          startTimer();
      }

      if (player === 1) {
          player1Score++;
          lastAction = { player: 1, action: 'add' }; // Запоминаем последнее действие
          document.getElementById('undoPlayer1').classList.remove('hidden'); // Показываем кнопку отмены для Player 1
          document.getElementById('undoPlayer2').classList.add('hidden'); // Скрываем кнопку отмены для Player 2
      } else {
          player2Score++;
          lastAction = { player: 2, action: 'add' }; // Запоминаем последнее действие
          document.getElementById('undoPlayer2').classList.remove('hidden'); // Показываем кнопку отмены для Player 2
          document.getElementById('undoPlayer1').classList.add('hidden'); // Скрываем кнопку отмены для Player 1
      }

      totalPoints = player1Score + player2Score;
      updateScore(player);
      updateServeIndicator();  // Обновляем подачу
    }

    // Отмена последнего действия
    function undoLastPoint(player) {
      if (!lastAction || lastAction.player !== player) return; // Если нет действия для отмены

      if (lastAction.action === 'add') {
        if (player === 1 && player1Score > 0) {
          player1Score--;

          // Если был зачислен сет для Player 1, отменяем его
          if (gameOver && player1Score < 21) {
            player1Sets--;
            document.getElementById('player1Sets').textContent = player1Sets;
            isPlayer1Winner = false;
            gameOver = false; // Продолжаем игру после отмены сета
            startTimer(); // Перезапуск таймера
          }

          document.getElementById('player1Score').classList.remove('bg-green-500', 'bg-red-500'); // Снимаем стили победы
        } else if (player === 2 && player2Score > 0) {
          player2Score--;

          // Если был зачислен сет для Player 2, отменяем его
          if (gameOver && player2Score < 21) {
            player2Sets--;
            document.getElementById('player2Sets').textContent = player2Sets;
            isPlayer2Winner = false;
            gameOver = false; // Продолжаем игру после отмены сета
            startTimer(); // Перезапуск таймера
          }

          document.getElementById('player2Score').classList.remove('bg-green-500', 'bg-red-500'); // Снимаем стили победы
        }

        totalPoints = player1Score + player2Score;
        updateScore(player);
        updateServeIndicator();

        // Сбрасываем цвет карточек, если игра продолжается
        resetCardColors();

        document.getElementById(`undoPlayer${player}`).classList.add('hidden');
        document.getElementById('continueBtn').classList.add('hidden'); // Скрываем кнопку "Продолжить"
        lastAction = null;
      }
    }

    // Проверка победителя
    function checkWinner() {
      if (player1Score >= 21 && player1Score - player2Score >= 2) {
        player1Sets++;
        document.getElementById('player1Sets').textContent = player1Sets;

        document.getElementById('player1Score').style.backgroundColor = '#0a5a22';  // Зелёный для победителя
        document.getElementById('player2Score').style.backgroundColor = '#b90a08';  // Красный для проигравшего

        if (player1Sets === 3) {
          isPlayer1Winner = true;
          endGame('Игрок 1 победил!');
        } else {
          gameOver = true;
          document.getElementById('continueBtn').classList.remove('hidden');
          clearInterval(timerInterval);
        }
      } else if (player2Score >= 21 && player2Score - player1Score >= 2) {
        player2Sets++;
        document.getElementById('player2Sets').textContent = player2Sets;

        document.getElementById('player2Score').style.backgroundColor = '#0a5a22';  // Зелёный для победителя
        document.getElementById('player1Score').style.backgroundColor = '#b90a08';  // Красный для проигравшего

        if (player2Sets === 3) {
          isPlayer2Winner = true;
          endGame('Игрок 2 победил!');
        } else {
          gameOver = true;
          document.getElementById('continueBtn').classList.remove('hidden');
          clearInterval(timerInterval);
        }
      }
    }

    function endGame(winnerMessage) {
      document.getElementById('gameOverMessage').textContent = winnerMessage;
      document.getElementById('gameOverOverlay').classList.remove('hidden');
      document.getElementById('newGameBtn').classList.remove('hidden');

      if (isPlayer1Winner) {
        document.getElementById('player1Sets').style.color = '#0a5a22';  // Зелёный для победителя
        document.getElementById('player2Sets').style.color = '#b90a08';  // Красный для проигравшего
      } else if (isPlayer2Winner) {
        document.getElementById('player2Sets').style.color = '#0a5a22';  // Зелёный для победителя
        document.getElementById('player1Sets').style.color = '#b90a08';  // Красный для проигравшего
      }

      clearInterval(timerInterval);
    }

    function closeGameOverOverlay() {
      document.getElementById('gameOverOverlay').classList.add('hidden');  // Просто закрываем модальное окно
      document.getElementById('pauseBtn').classList.add('hidden');  // Скрываем кнопку паузы
      document.getElementById('resumeBtn').classList.add('hidden'); // Скрываем кнопку продолжения
    }

    // Начало нового сета
    function startNewSet() {
      player1Score = 0;
      player2Score = 0;
      totalPoints = 0;
      gameOver = false;
      isPlayer1Winner = false;
      isPlayer2Winner = false;

      document.getElementById('player1Score').textContent = player1Score;
      document.getElementById('player2Score').textContent = player2Score;

      resetCardColors();
      document.getElementById('continueBtn').classList.add('hidden');
      document.getElementById('pauseBtn').classList.add('hidden');  // Скрываем кнопку паузы
      document.getElementById('resumeBtn').classList.add('hidden'); // Скрываем кнопку продолжения

      document.getElementById('undoPlayer1').classList.add('hidden');
      document.getElementById('undoPlayer2').classList.add('hidden');

      updateServeIndicator();
      startTimer();
    }

    function resetGame() {
      player1Score = 0;
      player2Score = 0;
      player1Sets = 0;
      player2Sets = 0;
      totalPoints = 0;
      time = 0;
      gameOver = false;
      clearInterval(timerInterval);

      document.getElementById('player1Score').textContent = 0;
      document.getElementById('player2Score').textContent = 0;
      document.getElementById('player1Sets').textContent = 0;
      document.getElementById('player2Sets').textContent = 0;
      document.getElementById('timer').textContent = '0:00';
      
      document.getElementById('player1Score').style.backgroundColor = '#071E39'; // Сбрасываем цвет фона
      document.getElementById('player2Score').style.backgroundColor = '#071E39';
      document.getElementById('player1Sets').style.color = '';  // Сбрасываем цвет текста
      document.getElementById('player2Sets').style.color = '';

      document.getElementById('pauseBtn').classList.add('hidden');  // Скрываем кнопку паузы
      document.getElementById('resumeBtn').classList.add('hidden'); // Скрываем кнопку продолжения
      document.getElementById('continueBtn').classList.add('hidden'); // Скрываем кнопку "Следующий сет"
      document.getElementById('gameOverOverlay').classList.add('hidden'); // Закрываем модальное окно

      updateServeIndicator();  // Обновляем подачу
    }

    function resetCardColors() {
      document.getElementById('player1Score').style.backgroundColor = '#071E39'; // Возвращаем исходный цвет фона
      document.getElementById('player2Score').style.backgroundColor = '#071E39'; // Возвращаем исходный цвет фона
    }

    // Обновление подачи
    function updateServeIndicator() {
    const serveSwitchInterval = 2;
    currentServer = Math.floor(totalPoints / serveSwitchInterval) % 2 === 0 ? 1 : 2;
    updateServeUI();
    }

    // Обновление UI для подачи
    function updateServeUI() {
    if (currentServer === 1) {
        document.getElementById('serve1').classList.remove('hidden');
        document.getElementById('serve2').classList.add('hidden');
    } else {
        document.getElementById('serve1').classList.add('hidden');
        document.getElementById('serve2').classList.remove('hidden');
    }
    }

    // Пауза/продолжение игры
    function togglePause() {
      isPaused = !isPaused;
      document.getElementById('pauseBtn').classList.toggle('hidden');
      document.getElementById('resumeBtn').classList.toggle('hidden');
      
      if (isPaused) {
        document.getElementById('timer').classList.remove('text-slate-300');
        document.getElementById('timer').classList.add('animate-pulse', 'text-red-500');
      } else {
        document.getElementById('timer').classList.add('text-slate-300');
        document.getElementById('timer').classList.remove('animate-pulse', 'text-red-500');
      }
    }


    // Полноэкранный режим
    function toggleFullscreen() {
    if (!document.fullscreenElement) {
        document.documentElement.requestFullscreen();
    } else if (document.exitFullscreen) {
        document.exitFullscreen();
    }
    }

    // Инициализация подачи при запуске
    updateServeIndicator();